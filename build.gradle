buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://repo.spring.io/release'
        }
    }
    dependencies {
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

subprojects {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://repo.spring.io/milestone'
        }
        maven {
            url 'http://search.maven.org'
        }
    }

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: "io.spring.dependency-management"
    apply plugin: "jacoco"

    group 'br.com.roggen'
    version = '2.1.0.RELEASE'
    sourceCompatibility = JavaVersion.VERSION_1_10

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE"
        }
    }

    dependencies {
        compile("org.projectlombok:lombok:1.18.2")
        compile([
                "javax.xml.bind:jaxb-api:2.3.0",
                "com.sun.xml.bind:jaxb-core:2.3.0",
                "com.sun.xml.bind:jaxb-impl:2.3.0",
                "javax.activation:activation:1.1.1",
                "javax.annotation:javax.annotation-api:1.3.2"

        ])
    }

    ext.contract = {
        dependencies {
            compileOnly("org.springframework.boot:spring-boot-starter-web")
        }
    }

    ext.clientWithContract = { String client ->
        dependencies {
            compile project(":${client.replace('client', 'contract')}")
            compileOnly("org.springframework.boot:spring-boot-starter-web")
            compile 'org.springframework.cloud:spring-cloud-starter-openfeign'
        }
    }

    ext.serviceWithContract = { name, List<String> versions ->
        apply plugin: 'org.springframework.boot'
        dependencies {
            compile project(":${name}-service-impl")
            versions.forEach{
                compile project(":${name}-contract-${it}")
            }
            compile project(":spring-web")
            testCompile project(":spring-boot-tests")
            compile 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        }
    }

    ext.serviceImpl = {
        dependencies {
            compile("org.springframework.boot:spring-boot-starter-data-mongodb")
            compile("de.flapdoodle.embed:de.flapdoodle.embed.mongo")
        }
    }
}